/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.ItineraireRecentConducteur;
import Entity.*;
import DAO.*;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Date;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import metier.*;
import utils.ComboBoxModel.ComboModelNomPassager;
import utils.Exceptions.ProblemeTechniqueException;
/**
 *
 * @author Axel
 */
public class ItineraireRecentConducteur extends javax.swing.JFrame {

    /**
     * Creates new form RapporterPassager
     */
    
    private Itineraire itineraire;
    private VilleItineraire villeItineraire ; 
    private participerevents ParticiperEvents ;
    private Passagers passagers ; 
    List<String> info = new ArrayList<>();
    List<String>infoMail = new ArrayList<>();
    private List<Passagers> PassagerList ;
    
    public ItineraireRecentConducteur() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        datagrid = new javax.swing.JTable();
        ListePassagerLabel = new javax.swing.JLabel();
        NoterBtn = new javax.swing.JButton();
        ReporterBtn = new javax.swing.JButton();
        NoteLabel = new javax.swing.JLabel();
        NoteTf = new javax.swing.JTextField();
        etoile1 = new javax.swing.JLabel();
        etoile2 = new javax.swing.JLabel();
        etoile3 = new javax.swing.JLabel();
        etoile4 = new javax.swing.JLabel();
        etoile5 = new javax.swing.JLabel();
        CauseLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        CauseTF = new javax.swing.JTextArea();
        NbrReportLabel = new javax.swing.JLabel();
        NbrReportTf = new javax.swing.JTextField();
        NbrBannisLabel = new javax.swing.JLabel();
        NbrBannisTf = new javax.swing.JTextField();
        EnregisterReportBtn = new javax.swing.JButton();
        ListePassager = new javax.swing.JComboBox();
        validerBtn = new javax.swing.JButton();
        Accueil = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        datagrid.setModel(new utils.components.jtable.tableModelMesItineraireRecent());
        datagrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datagridMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(datagrid);

        ListePassagerLabel.setText("Liste des Passagers");

        NoterBtn.setText("Noter");
        NoterBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NoterBtnMouseClicked(evt);
            }
        });

        ReporterBtn.setText("Reporter");
        ReporterBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReporterBtnMouseClicked(evt);
            }
        });

        NoteLabel.setText("Note :");

        NoteTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoteTfActionPerformed(evt);
            }
        });
        NoteTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                NoteTfKeyReleased(evt);
            }
        });

        etoile1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/etoile.png"))); // NOI18N

        etoile2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/etoile.png"))); // NOI18N

        etoile3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/etoile.png"))); // NOI18N

        etoile4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/etoile.png"))); // NOI18N

        etoile5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/etoile.png"))); // NOI18N

        CauseLabel.setText("Cause :");

        CauseTF.setColumns(20);
        CauseTF.setRows(5);
        jScrollPane2.setViewportView(CauseTF);

        NbrReportLabel.setText("Nombre de foix reporter");

        NbrBannisLabel.setText("Nombre de foix Bannis");

        EnregisterReportBtn.setText("Enregistrer");
        EnregisterReportBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EnregisterReportBtnMouseClicked(evt);
            }
        });

        ListePassager.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ListePassagerItemStateChanged(evt);
            }
        });

        validerBtn.setText("Valider");
        validerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                validerBtnMouseClicked(evt);
            }
        });

        Accueil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Accueil.png"))); // NOI18N
        Accueil.setText("Accueil");
        Accueil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AccueilMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(NbrReportLabel)
                        .addGap(18, 18, 18)
                        .addComponent(NbrReportTf, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(NbrBannisLabel)
                        .addGap(18, 18, 18)
                        .addComponent(NbrBannisTf, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ReporterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ListePassagerLabel)
                        .addGap(18, 18, 18)
                        .addComponent(ListePassager, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(NoteLabel)
                        .addGap(18, 18, 18)
                        .addComponent(NoteTf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(etoile1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etoile2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(etoile3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(etoile4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(etoile5)
                        .addGap(18, 18, 18)
                        .addComponent(validerBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NoterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(EnregisterReportBtn)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(CauseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Accueil, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ListePassagerLabel)
                        .addComponent(NoterBtn)
                        .addComponent(NoteLabel)
                        .addComponent(NoteTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(etoile1)
                        .addComponent(ListePassager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(validerBtn))
                    .addComponent(etoile2)
                    .addComponent(etoile3)
                    .addComponent(etoile4)
                    .addComponent(etoile5))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReporterBtn)
                    .addComponent(NbrReportLabel)
                    .addComponent(NbrReportTf, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NbrBannisLabel)
                    .addComponent(NbrBannisTf, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(CauseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(EnregisterReportBtn)
                .addGap(24, 24, 24)
                .addComponent(Accueil, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void remplirInformationComboBox(int ligne) throws ProblemeTechniqueException
    {
            ListePassager.removeAllItems();
            ListePassager.removeAll();
            villeItineraire = new VilleItineraire();
            itineraire = new Itineraire();
            PassagerList = new ArrayList<>();
        try {
            info=new ArrayList<>();
            infoMail = new ArrayList<>();
            villeItineraire =  ((utils.components.jtable.tableModelMesItineraireRecent)datagrid.getModel()).getRowEntity(ligne);
            itineraire = villeItineraire.getIdItineraires();
            List<participerevents> ListEvents = new ArrayList<>();
            ListEvents = participereventsDAO.getInstance().FindParticiperEventsByIdItinerairesAccepted(itineraire.getIditineraire());
            for(int i=0;i<ListEvents.size();i++)
            {
                PassagerList.add(ListEvents.get(i).getIdPassagers());
            }
             for(int j=0;j<PassagerList.size();j++)
            {
                ListePassager.addItem(PassagerList.get(j).getNom()+" "+PassagerList.get(j).getPrenom());
            }
            
             if (PassagerList.isEmpty() || PassagerList.size()==0)
             {
                 ListePassager.removeAllItems();
                 ListePassager.addItem("Pas de passager");
                 NbrBannisLabel.setVisible(false);
                 NbrReportLabel.setVisible(false);
                 NbrBannisTf.setVisible(false);
                 NbrReportTf.setVisible(false);
                 ListePassager.disable();
                 NoteLabel.setVisible(false);
                 NoteTf.setVisible(false);
                 NoterBtn.setVisible(false);
                 ReporterBtn.setVisible(false);
             }
             else
             {
                 NbrBannisLabel.setVisible(true);
                 NbrReportLabel.setVisible(true);
                 NbrBannisTf.setVisible(true);
                 NbrReportTf.setVisible(true);
                
             }
            
            //ListePassager.setModel(new utils.ComboBoxModel.ComboModelNomPassager(info));
            ListePassager.setSelectedIndex(0);
            //EmailBox.setModel(new utils.ComboBoxModel.ComboModelNomPassager(infoMail));
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void remplirinformations(int ligne) throws ProblemeTechniqueException
    {
            ListePassager.removeAllItems();
            ListePassager.removeAll();   
            remplirInformationComboBox(ligne);
        
        
    }
    private void datagridMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datagridMouseClicked
       ReporterBtn.setVisible(true);
       NoterBtn.setVisible(true);
       ListePassager.setVisible(true);
       ListePassagerLabel.setVisible(true);
       NoteTf.setText("");
       NoteTf.disable();
       NoteTf.setVisible(false);
       setEtoilsInvisible();
       NoteLabel.setVisible(false);
        try {
            remplirinformations(datagrid.getSelectedRow());
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_datagridMouseClicked

    private void NoteTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoteTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NoteTfActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        NoteLabel.setVisible(false);
        NoteTf.setVisible(false);
        ListePassager.setVisible(false);
        ListePassagerLabel.setVisible(false);
        NoteTf.disable();
        etoile1.setVisible(false);
        etoile2.setVisible(false);
        etoile3.setVisible(false);
        etoile4.setVisible(false);
        etoile5.setVisible(false);
        CauseLabel.setVisible(false);
        CauseTF.setVisible(false);
        NbrBannisLabel.setVisible(false);
        NbrBannisTf.setVisible(false);
        NbrReportLabel.setVisible(false);
        NbrReportTf.setVisible(false);
        NbrBannisTf.disable();
        NbrReportTf.disable();
        CauseTF.disable();
        EnregisterReportBtn.setVisible(false);
        NbrBannisTf.disable();
        NbrReportTf.disable();
        validerBtn.setVisible(false);
        ReporterBtn.setVisible(false);
        NoterBtn.setVisible(false);
    }//GEN-LAST:event_formWindowOpened
    private void CalculeNote(double note)
    {
        
        etoile1.setVisible(false);
        etoile2.setVisible(false);
        etoile3.setVisible(false);
        etoile4.setVisible(false);
        etoile5.setVisible(false);
        if ((0<=note) && (note<2))
             etoile1.setVisible(true);
        else if ((2<=note) && (note<4))
        {
             etoile1.setVisible(true);
             etoile2.setVisible(true);
        }
        else if ((4<=note) && (note<6))
        {
             etoile1.setVisible(true);
             etoile2.setVisible(true);
             etoile3.setVisible(true);
        }
        else if ((6<=note) && (note<8))
        {
             etoile1.setVisible(true);
             etoile2.setVisible(true);
             etoile3.setVisible(true);
             etoile4.setVisible(true);
        }
        else if ((8<=note) && (note<=10))
        {
             etoile1.setVisible(true);
             etoile2.setVisible(true);
             etoile3.setVisible(true);
             etoile4.setVisible(true);
             etoile5.setVisible(true);
        }
        
    }
    private void setEtoilsInvisible()
    {
             etoile1.setVisible(false);
             etoile2.setVisible(false);
             etoile3.setVisible(false);
             etoile4.setVisible(false);
             etoile5.setVisible(false);
    }
    private void NoterBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NoterBtnMouseClicked
        setEtoilsInvisible();
        NoteLabel.setVisible(true);
        NoteTf.setText("");
        NoteTf.setVisible(true);
        NoteTf.enable();
        validerBtn.setVisible(true);
    }//GEN-LAST:event_NoterBtnMouseClicked

    private void NoteTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NoteTfKeyReleased
        setEtoilsInvisible();
        int note;
        if(NoteTf.getText().equals("") || !utils.Validators.NumeroTelValidator(NoteTf.getText()))
        {
            note = -1;
        }
        else
        {
            note = Integer.parseInt(NoteTf.getText());
        }
        CalculeNote(note);
    }//GEN-LAST:event_NoteTfKeyReleased

    private void ReporterBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReporterBtnMouseClicked
        CauseLabel.setVisible(true);
        CauseTF.setVisible(true);
        CauseTF.enable();
        EnregisterReportBtn.setVisible(true);
    }//GEN-LAST:event_ReporterBtnMouseClicked

    private void EnregisterReportBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EnregisterReportBtnMouseClicked
        Passagers pp = new Passagers();
        if (CauseTF.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Il faut remplir le cause");
        }
        else
        {
            
             java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("yyyy-mm-dd");
             df.format(Calendar.getInstance().getTime());
            try {
                  if(ListePassager.getSelectedIndex()!=-1)
                  pp = PassagersDAO.getInstance().getPassagerByEmail(PassagerList.get(ListePassager.getSelectedIndex()).getEmail()) ;
            } catch (ProblemeTechniqueException ex) {
                System.out.println("probleme de recuperation dun passager");
            }
            Rapport rapport = new Rapport();
            rapport.setCause(CauseTF.getText());
            rapport.setRapporterConducteur(false);
            rapport.setRapporterPassager(true);
            rapport.setDaterapport(df.getCalendar().getTime());
            rapport.setIdPassager(pp);
            rapport.setTraiter(false);
            rapport.setIditineraire(itineraire);
            try {
                  if (RapportDAO.getInstance().create(rapport))
                  {
                      JOptionPane.showMessageDialog(null, "Le Passager "+PassagerList.get(ListePassager.getSelectedIndex()).getNom()+" "+PassagerList.get(ListePassager.getSelectedIndex()).getPrenom()+" a été rapporter");
                      CauseLabel.setVisible(false);
                      CauseTF.setVisible(false);
                      ReporterBtn.setVisible(false);
                      EnregisterReportBtn.setVisible(false);
                      if(ListePassager.getSelectedIndex()!=-1)
                      {
                        passagers = PassagersDAO.getInstance().getPassagerByEmail(PassagerList.get(ListePassager.getSelectedIndex()).getEmail()) ;
                        Authentification authentification = new Authentification();
                        authentification = AuthentificationDAO.getInstance().getByIdCompteAndType(passagers.getIdPassagers(),"p") ;
                        int nbrBan = BanissementsDAO.getInstance().getNbrBannisementByIdAuthentification(authentification.getIdAuthentification());
                        int nbrReport = RapportDAO.getInstance().getNbrRapportByIdPassager(passagers.getIdPassagers());
                        NbrBannisTf.setText(String.valueOf(nbrBan));
                        NbrReportTf.setText(String.valueOf(nbrReport));
                      }
                  }
                  else
                  {
                       JOptionPane.showMessageDialog(null, "le Passager n'as pas été rapporter");
                  }
            } catch (ClassNotFoundException ex) {
                System.out.println("exception 1 ");
            } catch (ProblemeTechniqueException ex) {
                  System.out.println("exception 2 ");
            } catch (SQLException ex) {
                  System.out.println("exception 3 ");
            } 
        }
    }//GEN-LAST:event_EnregisterReportBtnMouseClicked

    private void ListePassagerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ListePassagerItemStateChanged
        NoteTf.setVisible(true);
        int index = ListePassager.getSelectedIndex();
       
        //EmailBox.setSelectedIndex(index);
            
            if(ListePassager.getSelectedIndex()!=-1 && !ListePassager.getSelectedItem().equals("Pas de passager") && !PassagerList.isEmpty())
            {
                    ListePassager.enable();
                    NoteTf.setText(String.valueOf(PassagerList.get(index).getNote()));
                    CalculeNote(PassagerList.get(index).getNote());
            try {
                 Authentification authentification = new Authentification();
                 authentification = AuthentificationDAO.getInstance().getByIdCompteAndType(PassagerList.get(index).getIdPassagers(),"p") ;
                int nbrbannis = BanissementsDAO.getInstance().getNbrBannisementByIdAuthentification(authentification.getIdAuthentification());
                int nbrreport = RapportDAO.getInstance().getNbrRapportByIdPassager(PassagerList.get(index).getIdPassagers());
                NbrBannisTf.setText(String.valueOf(nbrbannis));
                NbrReportTf.setText(String.valueOf(nbrreport));
            } catch (ProblemeTechniqueException ex) {
                Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(Level.SEVERE, null, ex);
            }
                
            }
            
        
    }//GEN-LAST:event_ListePassagerItemStateChanged

    private void validerBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_validerBtnMouseClicked
       if (NoteTf.getText().equalsIgnoreCase(""))
       {
            JOptionPane.showMessageDialog(null, "il faut remplir la note");
       }
       else if (!utils.Validators.NumeroTelValidator(NoteTf.getText()))
       {
           JOptionPane.showMessageDialog(null, "la note ne dois pas contenir des caractéres !");
       }
       else if (!utils.Validators.TailleNoteValidator(NoteTf.getText()))
       {
           JOptionPane.showMessageDialog(null, "la note de dois pas dépasser le chiffre 10 !");
       }
       else
       {
           passagers=PassagerList.get(ListePassager.getSelectedIndex()) ;
           Double NoubelleNote = (passagers.getNote() + Double.parseDouble(NoteTf.getText()))/2;
           passagers.setNote(NoubelleNote);
           try {
               if (PassagersDAO.getInstance().update(passagers))
               {
                   JOptionPane.showMessageDialog(null, "la note a été attribuer avec succé");
                   passagers=PassagersDAO.getInstance().getPassagerById(passagers.getIdPassagers());
                   NoteTf.setText(String.valueOf(passagers.getNote()));
                   NoteTf.disable();
                   NoterBtn.setVisible(false);
                   validerBtn.setVisible(false);
                   
               }
           } catch (ProblemeTechniqueException ex) {
               Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(Level.SEVERE, null, ex);
           }
       }
    }//GEN-LAST:event_validerBtnMouseClicked

    private void AccueilMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AccueilMouseClicked
        (new GUI.Conductuer.Accueil()).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_AccueilMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItineraireRecentConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItineraireRecentConducteur().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Accueil;
    private javax.swing.JLabel CauseLabel;
    private javax.swing.JTextArea CauseTF;
    private javax.swing.JButton EnregisterReportBtn;
    private javax.swing.JComboBox ListePassager;
    private javax.swing.JLabel ListePassagerLabel;
    private javax.swing.JLabel NbrBannisLabel;
    private javax.swing.JTextField NbrBannisTf;
    private javax.swing.JLabel NbrReportLabel;
    private javax.swing.JTextField NbrReportTf;
    private javax.swing.JLabel NoteLabel;
    private javax.swing.JTextField NoteTf;
    private javax.swing.JButton NoterBtn;
    private javax.swing.JButton ReporterBtn;
    private javax.swing.JTable datagrid;
    private javax.swing.JLabel etoile1;
    private javax.swing.JLabel etoile2;
    private javax.swing.JLabel etoile3;
    private javax.swing.JLabel etoile4;
    private javax.swing.JLabel etoile5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton validerBtn;
    // End of variables declaration//GEN-END:variables
}
