/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.NewItineraireConducteur;

import Entity.*;
import DAO.*;
import java.awt.Color;
import java.awt.Font;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Entity;
import javax.swing.JOptionPane;
import metier.*;
import utils.*;
import utils.Exceptions.ProblemeTechniqueException;
import utils.components.jtable.tableModelNewItineraire;

/**
 *
 * @author Axel
 */
public class NewItineraireConducteur extends javax.swing.JFrame {
    
    private Itineraire itineraire;
    private VilleItineraire villeItineraire ; 
    private participerevents ParticiperEvents ;
    private Passagers passagers ;
    private localites localite ; 
    private VilleItineraire villeDepart ;
    private VilleItineraire villeArriver ;
    List<String> info = new ArrayList<>();
    List<String>infoMail = new ArrayList<>();
    private List<participerevents> PE = new ArrayList<>();
    private List<gouvernorats> go = new ArrayList<>();
    private  List <localites> loc = new ArrayList<>();
    private List<delegations> dl = new ArrayList<>();
    /**
     * Creates new form NewItineraireConducteur
     */
    public NewItineraireConducteur() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        datagrid = new javax.swing.JTable();
        AccueilBtn = new javax.swing.JButton();
        SupprimerBtn = new javax.swing.JButton();
        ModifierBtn = new javax.swing.JButton();
        AjouterBtn = new javax.swing.JButton();
        EnregisterBtn = new javax.swing.JButton();
        ConfirmerBtn = new javax.swing.JButton();
        PanelInfo = new javax.swing.JPanel();
        PublicCheckBox = new javax.swing.JCheckBox();
        VilleALabel = new javax.swing.JLabel();
        GouverneratBox1 = new javax.swing.JComboBox();
        delegationBox1 = new javax.swing.JComboBox();
        LocalitesBox1 = new javax.swing.JComboBox();
        ConfirmerCheckBox = new javax.swing.JCheckBox();
        VilleDLabel = new javax.swing.JLabel();
        GouverneratBox = new javax.swing.JComboBox();
        delegationBox = new javax.swing.JComboBox();
        LocalitesBox = new javax.swing.JComboBox();
        DateDepartTf = new javax.swing.JTextField();
        DateDLabel = new javax.swing.JLabel();
        PrixLabel = new javax.swing.JLabel();
        PrixTf = new javax.swing.JTextField();
        NbrPConfirmerLabel = new javax.swing.JLabel();
        NbrPassagerConfirmerTf = new javax.swing.JTextField();
        NbrPAttenteLabel = new javax.swing.JLabel();
        NbrAttenteTf = new javax.swing.JTextField();
        ListePassagerBtn = new javax.swing.JButton();
        MapBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        DescriptionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DescriptionTf = new javax.swing.JTextArea();
        SetTextnbrPlace = new javax.swing.JLabel();
        testcb = new javax.swing.JComboBox();
        RemplacerBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        datagrid.setModel(new utils.components.jtable.tableModelNewItineraire());
        datagrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                datagridMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(datagrid);

        AccueilBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Retour.png"))); // NOI18N
        AccueilBtn.setText("Accueil");
        AccueilBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AccueilBtnMouseClicked(evt);
            }
        });

        SupprimerBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/supprimer.png"))); // NOI18N
        SupprimerBtn.setText("Supprimer");
        SupprimerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SupprimerBtnMouseClicked(evt);
            }
        });

        ModifierBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/modifier.png"))); // NOI18N
        ModifierBtn.setText("Modifier");
        ModifierBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ModifierBtnMouseClicked(evt);
            }
        });

        AjouterBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/ajouter.png"))); // NOI18N
        AjouterBtn.setText("Ajouter");
        AjouterBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AjouterBtnMouseClicked(evt);
            }
        });

        EnregisterBtn.setText("Enregister");
        EnregisterBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EnregisterBtnMouseClicked(evt);
            }
        });

        ConfirmerBtn.setText("Confirmer");
        ConfirmerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ConfirmerBtnMouseClicked(evt);
            }
        });

        PublicCheckBox.setText("Public");

        VilleALabel.setText("Ville d'arriver :");

        GouverneratBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                GouverneratBox1ItemStateChanged(evt);
            }
        });

        delegationBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                delegationBox1ItemStateChanged(evt);
            }
        });

        ConfirmerCheckBox.setText("Confirmer");
        ConfirmerCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ConfirmerCheckBoxItemStateChanged(evt);
            }
        });

        VilleDLabel.setText("Ville de départ :");

        GouverneratBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                GouverneratBoxItemStateChanged(evt);
            }
        });

        delegationBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                delegationBoxItemStateChanged(evt);
            }
        });

        DateDLabel.setText("Date de départ :");

        PrixLabel.setText("Prix :");

        NbrPConfirmerLabel.setText("Nombre de passager confirmer :");

        NbrPassagerConfirmerTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NbrPassagerConfirmerTfActionPerformed(evt);
            }
        });

        NbrPAttenteLabel.setText("Nombre de passager en attente : ");

        ListePassagerBtn.setText("Liste des passagers en attente");
        ListePassagerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListePassagerBtnMouseClicked(evt);
            }
        });

        MapBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/map.png"))); // NOI18N

        jLabel3.setText("Gouvernerat");

        jLabel4.setText("Delegation");

        jLabel5.setText("Localite");

        DescriptionLabel.setText("Description :");

        DescriptionTf.setColumns(20);
        DescriptionTf.setRows(5);
        jScrollPane1.setViewportView(DescriptionTf);

        SetTextnbrPlace.setForeground(new java.awt.Color(255, 51, 51));

        testcb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                testcbItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout PanelInfoLayout = new javax.swing.GroupLayout(PanelInfo);
        PanelInfo.setLayout(PanelInfoLayout);
        PanelInfoLayout.setHorizontalGroup(
            PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInfoLayout.createSequentialGroup()
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(PanelInfoLayout.createSequentialGroup()
                                    .addComponent(DateDLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(DateDepartTf, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PanelInfoLayout.createSequentialGroup()
                                        .addGap(146, 146, 146)
                                        .addComponent(jLabel3))
                                    .addGroup(PanelInfoLayout.createSequentialGroup()
                                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(VilleDLabel)
                                            .addComponent(VilleALabel))
                                        .addGap(18, 18, 18)
                                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(GouverneratBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(GouverneratBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(PanelInfoLayout.createSequentialGroup()
                                .addComponent(NbrPConfirmerLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NbrPassagerConfirmerTf, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInfoLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(139, 139, 139))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInfoLayout.createSequentialGroup()
                                .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(delegationBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(delegationBox, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PanelInfoLayout.createSequentialGroup()
                                        .addComponent(PrixLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(PrixTf, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(55, 55, 55))
                            .addGroup(PanelInfoLayout.createSequentialGroup()
                                .addComponent(NbrPAttenteLabel)
                                .addGap(18, 18, 18)
                                .addComponent(NbrAttenteTf, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelInfoLayout.createSequentialGroup()
                                .addComponent(ListePassagerBtn)
                                .addGap(151, 151, 151))
                            .addGroup(PanelInfoLayout.createSequentialGroup()
                                .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInfoLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(110, 110, 110))
                                    .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(LocalitesBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LocalitesBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(33, 33, 33)
                                .addComponent(MapBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22))))
                    .addGroup(PanelInfoLayout.createSequentialGroup()
                        .addComponent(DescriptionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(PanelInfoLayout.createSequentialGroup()
                        .addComponent(PublicCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ConfirmerCheckBox)
                        .addGap(86, 86, 86)
                        .addComponent(testcb, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(PanelInfoLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(SetTextnbrPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        PanelInfoLayout.setVerticalGroup(
            PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PublicCheckBox)
                    .addComponent(ConfirmerCheckBox)
                    .addComponent(testcb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelInfoLayout.createSequentialGroup()
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GouverneratBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delegationBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocalitesBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(VilleDLabel))
                        .addGap(24, 24, 24)
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(VilleALabel)
                            .addComponent(GouverneratBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delegationBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LocalitesBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DateDLabel)
                            .addComponent(DateDepartTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PrixLabel)
                            .addComponent(PrixTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NbrPConfirmerLabel)
                            .addComponent(NbrPassagerConfirmerTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NbrPAttenteLabel)
                            .addComponent(NbrAttenteTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ListePassagerBtn)))
                    .addComponent(MapBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(SetTextnbrPlace)
                .addGap(18, 18, 18)
                .addGroup(PanelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DescriptionLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        RemplacerBtn.setText("Remplacer");
        RemplacerBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RemplacerBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AccueilBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(SupprimerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(87, 87, 87)
                        .addComponent(ModifierBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(AjouterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(RemplacerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(EnregisterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(ConfirmerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(142, 142, 142))))
            .addComponent(jScrollPane2)
            .addComponent(PanelInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AccueilBtn)
                    .addComponent(SupprimerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModifierBtn)
                    .addComponent(AjouterBtn))
                .addGap(37, 37, 37)
                .addComponent(PanelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EnregisterBtn)
                    .addComponent(ConfirmerBtn)
                    .addComponent(RemplacerBtn)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        PanelInfo.setVisible(false);
        ModifierBtn.setVisible(false);
        SupprimerBtn.setVisible(false);
        ConfirmerBtn.setVisible(false);
        EnregisterBtn.setVisible(false);
        RemplacerBtn.setVisible(false);
        
    }//GEN-LAST:event_formWindowOpened
    
    private void DisableAll()
    {
        delegationBox.disable();
        GouverneratBox.disable();
        LocalitesBox.disable();
        delegationBox1.disable();
        GouverneratBox1.disable();
        LocalitesBox1.disable();
        DateDepartTf.disable();
        PrixTf.disable();
        NbrPassagerConfirmerTf.disable();
        NbrAttenteTf.disable();
        DescriptionTf.disable();
    }
    
    private void EnableAll()
    {
        delegationBox.enable();
        GouverneratBox.enable();
        LocalitesBox.enable();
        delegationBox1.enable();
        GouverneratBox1.enable();
        LocalitesBox1.enable();
        DateDepartTf.enable();
        PrixTf.enable();
        DescriptionTf.enable();
    }
    
    private void ViderAll()
    {
        DateDepartTf.setText("");
        PrixTf.setText("");
        ViderComboBox();
        NbrPassagerConfirmerTf.setText("");
        NbrAttenteTf.setText("");
        DescriptionTf.setText("");
        SetTextnbrPlace.setText("");
        
    }
    
    private int VerifierNbrPlace()
    {
        Conducteurs c = itineraire.getIdConducteur();
        int nbrPlace = c.getIdVoitures().getNbrplaces()-1;
        int nbrPlaceConfirmer = Integer.parseInt( NbrPassagerConfirmerTf.getText());
        int nbrPlaceRestante=nbrPlace-nbrPlaceConfirmer;
        if (nbrPlace==nbrPlaceConfirmer)
        {
            ListePassagerBtn.setVisible(false);
            SetTextnbrPlace.setText("le nombre des places est complet");
            SetTextnbrPlace.setForeground(new java.awt.Color(0, 255, 51));
        }
        else
        {
             SetTextnbrPlace.setText("il vous reste "+nbrPlaceRestante+" places pour cette itinéraire");
        }
        return nbrPlaceConfirmer;
        
    }
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       
    }//GEN-LAST:event_formWindowActivated
  
    private void ViderComboBox()
   {
       LocalitesBox.removeAllItems();
       LocalitesBox1.removeAllItems();
       GouverneratBox.removeAllItems();
       GouverneratBox1.removeAllItems();
       delegationBox.removeAllItems();
       delegationBox1.removeAllItems();
   }
   
    private void remplirInformationComboBoxLocaliter(int ligne) throws ProblemeTechniqueException
    {
            villeDepart = new VilleItineraire();
            villeArriver = new VilleItineraire();
            villeItineraire = new VilleItineraire();
            itineraire = new Itineraire();
            villeItineraire =  ((utils.components.jtable.tableModelNewItineraire)datagrid.getModel()).getRowEntity(ligne);
            itineraire = villeItineraire.getIdItineraires();
            localite = villeItineraire.getIdLocalites();
            
        try {
                villeDepart = VilleItineraireDAO.getInstance().FindVilleDepart(itineraire.getIditineraire());
                villeArriver = VilleItineraireDAO.getInstance().FindVilleArriver(itineraire.getIditineraire());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } 
            LocalitesBox.removeAllItems();
            LocalitesBox1.removeAllItems();
            LocalitesBox.addItem(villeDepart.getIdLocalites().getNomLocalite());
            testcb.addItem(villeDepart.getIdLocalites().getNomLocalite());
            testcb.addItem(villeArriver.getIdLocalites().getNomLocalite());
            LocalitesBox.setSelectedIndex(0);
            LocalitesBox1.addItem(villeArriver.getIdLocalites().getNomLocalite());
            LocalitesBox1.setSelectedIndex(0);
        
    }
     
     private void remplirInformationComboBoxDelegation(int ligne) throws ProblemeTechniqueException
    {
        
            delegationBox.removeAllItems();
            delegationBox1.removeAllItems();
            delegationBox.addItem(villeDepart.getIdLocalites().getIdDelegations().getNomDelegation());
            delegationBox.setSelectedIndex(0);
            delegationBox1.addItem(villeArriver.getIdLocalites().getIdDelegations().getNomDelegation());
            delegationBox1.setSelectedIndex(0);
        
    }
     
     private void remplirInformationComboBoxGouvernerat(int ligne) throws ProblemeTechniqueException
    {
            GouverneratBox.removeAllItems();
            GouverneratBox1.removeAllItems();
            GouverneratBox.addItem(villeDepart.getIdLocalites().getIdDelegations().getIdGouvernorats().getNomGouvernorat());
            GouverneratBox.setSelectedIndex(0);
            GouverneratBox1.addItem(villeArriver.getIdLocalites().getIdDelegations().getIdGouvernorats().getNomGouvernorat());
            GouverneratBox1.setSelectedIndex(0);
        
    }
     
    private void AffecterInformationComboBoxLocaliter() throws ProblemeTechniqueException
    {
           
            LocalitesBox.removeAllItems();
            for (int i=0;i<dl.size();i++) 
            {
                if (dl.get(i).getNomDelegation().equals(delegationBox.getSelectedItem()))
                {
                    try {
                        loc = localitesDAO.getInstance().GetAllLocalites(dl.get(i).getIdDelegations());
                        for (int j=0;j<loc.size();j++)
                        {
                            LocalitesBox.addItem(loc.get(j).getNomLocalite());
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        
            }
            
        
    }
     
    private void AffecterInformationComboBox1Localiter() throws ProblemeTechniqueException
    {
           
            LocalitesBox1.removeAllItems();
            for (int i=0;i<dl.size();i++) 
            {
                 if (dl.get(i).getNomDelegation().equals(delegationBox1.getSelectedItem()))
                {
                     try {
                        loc = localitesDAO.getInstance().GetAllLocalites(dl.get(i).getIdDelegations());
                        for (int j=0;j<loc.size();j++)
                        {
                            LocalitesBox1.addItem(loc.get(j).getNomLocalite());
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        
            }
            
        
    }
    
     private void AffecterInformationComboBoxDelegation() throws ProblemeTechniqueException
    {
            delegationBox.removeAllItems();
          
            for (int i=0;i<go.size();i++) 
            {
                if (go.get(i).getNomGouvernorat().equals(GouverneratBox.getSelectedItem()))
                {
                    try {
                        dl = delegationsDAO.getInstance().GetAllDelegationByIdGouvernerat(go.get(i).getIdGouvernorats());
                        for (int j=0;j<dl.size();j++)
                        {
                            delegationBox.addItem(dl.get(j).getNomDelegation());
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        
            }
    }
    
     private void AffecterInformationComboBox1Delegation() throws ProblemeTechniqueException
    {
            
            delegationBox1.removeAllItems();
            
            for (int i=0;i<go.size();i++) 
            {
               
                 if (go.get(i).getNomGouvernorat().equals(GouverneratBox1.getSelectedItem()))
                {
                     try {
                        dl = delegationsDAO.getInstance().GetAllDelegationByIdGouvernerat(go.get(i).getIdGouvernorats());
                        for (int j=0;j<dl.size();j++)
                        {
                            delegationBox1.addItem(dl.get(j).getNomDelegation());
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
        
            }
    }
     
     private void AffecterInformationComboBoxGouvernerat() throws ProblemeTechniqueException
    {
            
        try {
            go = gouvernoratsDAO.getInstance().GetAllGouvernerat();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i=0;i<go.size();i++) 
        {
            GouverneratBox.addItem(go.get(i).getNomGouvernorat());
            GouverneratBox1.addItem(go.get(i).getNomGouvernorat());
        }
        
    }
    
     private void EffacerInformation(int ligne)throws ProblemeTechniqueException
     {
         VilleItineraire ville = ((utils.components.jtable.tableModelNewItineraire)datagrid.getModel()).getRowEntity(ligne);
        try {
            if (VilleItineraireDAO.getInstance().delete(ville))
            {
                JOptionPane.showMessageDialog(null, "la supression à été rétablie avec succé");
                datagrid.setModel(new tableModelNewItineraire());
            }
            else
            {
                JOptionPane.showMessageDialog(null, "la supression n'a pas été aboutie");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
     }
     
    private void remplirinformations(int ligne) throws ProblemeTechniqueException
    {
         //ViderComboBox();
         //villeItineraire = new VilleItineraire();
         //itineraire = new Itineraire();
         villeItineraire =  ((utils.components.jtable.tableModelNewItineraire)datagrid.getModel()).getRowEntity(ligne);
         itineraire = villeItineraire.getIdItineraires();
         localite = villeItineraire.getIdLocalites();
         
         remplirInformationComboBoxLocaliter(ligne);
         remplirInformationComboBoxDelegation(ligne);
         remplirInformationComboBoxGouvernerat(ligne);
         DateDepartTf.setText(itineraire.getDateitineraire().toString());
         double prix = itineraire.getPrix();
         String result=String.valueOf(prix);
         int Accepter=0;
         int nonAccepter = 0 ;
         PrixTf.setText(result);
         try {
                PE = participereventsDAO.getInstance().FindParticiperEventsByIdItineraires(itineraire.getIditineraire());
               
                for(int j = 0 ; j<PE.size();j++)
                {
                    if (PE.get(j).isEstAccepter()==true)
                    {
                        Accepter++;
                    }
                    else
                    {
                        nonAccepter++;
                    }
                }
               
        } catch (ClassNotFoundException ex) {
            System.out.println("Probleme de recuperation du nombre de participant");
        } catch (SQLException ex) {
            System.out.println("Probleme de recuperation du nombre de participant");

        }
        NbrPassagerConfirmerTf.setText(String.valueOf(Accepter));
        NbrAttenteTf.setText(String.valueOf(nonAccepter));
        DescriptionTf.setText(itineraire.getDescription());
        int nbrPlaceRestante=VerifierNbrPlace();
        if (nonAccepter==0)
        {
            ListePassagerBtn.setVisible(false);
        }
        else
        {
            ListePassagerBtn.setVisible(true);
        }
       
    }
    
    private void MiseAjourInformation()throws ProblemeTechniqueException
    {
        try {
            VilleItineraire ville = new VilleItineraire();
            localites locality  = new localites();
            Itineraire i = new  Itineraire();
                i.setDescription(DescriptionTf.getText());
                if (ConfirmerCheckBox.isSelected())
                {
                    i.setEstconfirmer(true);
                }
                else
                {
                    i.setEstconfirmer(false);
                }
                 if (PublicCheckBox.isSelected())
                {
                    i.setEstpublic(true);
                }
                else
                {
                    i.setEstpublic(false);
                }
                 java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("yyyy-mm-dd");
            try {
                i.setDateitineraire(df.parse(DateDepartTf.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
            }
                i.setDatepublication(new Date(new java.util.Date().getTime()));
                i.setDistanceitineraire(0);
                Conducteurs c = new Conducteurs();
                c.setIdConducteurs(2);
                i.setIdConducteur(c);
               if(ItineraireDAO.getInstance().update(i))
               {
                    ville = VilleItineraireDAO.getInstance().FindVilleDepart(i.getIditineraire());
                     //recupération de la localite 
                    gouvernorats g = gouvernoratsDAO.getInstance().GetGouverneratByNom(GouverneratBox.getSelectedItem().toString());
                    delegations d = delegationsDAO.getInstance().GetDelegationByIdGouvernerat(g.getIdGouvernorats());
                    localites l = localitesDAO.getInstance().GetLocalitesByIdDelegation(d.getIdDelegations());
                    ville.setIdLocalites(l);
                    VilleItineraireDAO.getInstance().update(ville, 1);
                    //fin récuperation de la localité
                    ville = VilleItineraireDAO.getInstance().FindVilleArriver(i.getIditineraire());
                     //recupération de la localite 
                     g = gouvernoratsDAO.getInstance().GetGouverneratByNom(GouverneratBox1.getSelectedItem().toString());
                     d = delegationsDAO.getInstance().GetDelegationByIdGouvernerat(g.getIdGouvernorats());
                     l = localitesDAO.getInstance().GetLocalitesByIdDelegation(d.getIdDelegations());
                    ville.setIdLocalites(l);
                    //fin récuperation de la localité
                    if (VilleItineraireDAO.getInstance().update(ville, 0))
                    {
                        JOptionPane.showMessageDialog(null, "la modification à été effectuer avec succé ");
                        PanelInfo.setVisible(false);
                        RemplacerBtn.setVisible(false);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "probleme de modification");
                    }
                    
               }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }

        
            
    }
    private void datagridMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datagridMouseClicked
        ViderComboBox();
        PanelInfo.setVisible(true);
        DisableAll();
        AjouterBtn.setVisible(true);
       
        
        
        
        try {
            remplirinformations(datagrid.getSelectedRow());
            
            if (itineraire.isEstconfirmer()==false)
            {
               SupprimerBtn.setVisible(true);
               ModifierBtn.setVisible(true);
               ConfirmerCheckBox.setEnabled(true);
               ConfirmerCheckBox.setSelected(false);
            }
            else
            {
                SupprimerBtn.setVisible(false);
                ModifierBtn.setVisible(false);
                ConfirmerCheckBox.setSelected(true);
                ConfirmerCheckBox.setEnabled(false);
                ConfirmerBtn.setVisible(false);
            }
            if (itineraire.isEstpublic())
            {
                PublicCheckBox.setSelected(true);
                PublicCheckBox.setEnabled(false);
            }
            else
            {
                PublicCheckBox.setEnabled(false);
            }
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_datagridMouseClicked

    private void ListePassagerBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListePassagerBtnMouseClicked
       GUI.ListePassager.ListePassager acc = new GUI.ListePassager.ListePassager(PE);
            acc.setVisible(true);
    }//GEN-LAST:event_ListePassagerBtnMouseClicked

    private void NbrPassagerConfirmerTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NbrPassagerConfirmerTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NbrPassagerConfirmerTfActionPerformed

    private void AjouterBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AjouterBtnMouseClicked
       Conducteurs cc = new Conducteurs();
       cc = (Conducteurs)Session.getInstance().getUser().getCompte();
       if (cc.getIdVoitures()!=null && cc.getIdVoitures().getIdvoiture()!=0)
       {
        try {
              
              
                PanelInfo.setVisible(true);
                ConfirmerBtn.setVisible(false);
                EnregisterBtn.setVisible(true);
                ListePassagerBtn.setVisible(false);
                NbrAttenteTf.setVisible(false);
                NbrPassagerConfirmerTf.setVisible(false);
                NbrPAttenteLabel.setVisible(false);
                NbrPConfirmerLabel.setVisible(false);
                RemplacerBtn.setVisible(false);
                ConfirmerCheckBox.setSelected(false);
                ConfirmerCheckBox.setEnabled(true);
                PublicCheckBox.setSelected(false);
                PublicCheckBox.setEnabled(true);
                ViderAll();
                EnableAll();
                AffecterInformationComboBoxGouvernerat();
               
                
              
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
       }
       else
       {
            JOptionPane.showMessageDialog(null, "il faut completer votre profil .");
       }
    }//GEN-LAST:event_AjouterBtnMouseClicked

    private void GouverneratBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_GouverneratBoxItemStateChanged
      try {
           AffecterInformationComboBoxDelegation();
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GouverneratBoxItemStateChanged

    private void delegationBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_delegationBoxItemStateChanged
        try {
            AffecterInformationComboBoxLocaliter();
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_delegationBoxItemStateChanged

    private void GouverneratBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_GouverneratBox1ItemStateChanged
      try {
            AffecterInformationComboBox1Delegation();
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_GouverneratBox1ItemStateChanged

    private void delegationBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_delegationBox1ItemStateChanged
       try {
             AffecterInformationComboBox1Localiter();
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_delegationBox1ItemStateChanged

    private void ConfirmerCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ConfirmerCheckBoxItemStateChanged
       if (ConfirmerCheckBox.isSelected())
       {
          if (!RemplacerBtn.isVisible())
          ConfirmerBtn.setVisible(true);
        
       }
       else
       {
         ConfirmerBtn.setVisible(false);  
       }
    }//GEN-LAST:event_ConfirmerCheckBoxItemStateChanged

    private void SupprimerBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SupprimerBtnMouseClicked
        if(ConfirmerCheckBox.isSelected())
        {
            JOptionPane.showMessageDialog(null, "Vous avez déja confirmer cette itinéraire vous ne pouvez pas le supprimer");
        }
        else
        {
            try {
                EffacerInformation(datagrid.getSelectedRow());
            } catch (ProblemeTechniqueException ex) {
                Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_SupprimerBtnMouseClicked

    private void EnregisterBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EnregisterBtnMouseClicked
        try {
            Itineraire i = new  Itineraire();
            i.setDescription(DescriptionTf.getText());
            if (ConfirmerCheckBox.isSelected())
            {
                i.setEstconfirmer(true);
            }
            else
            {
                i.setEstconfirmer(false);
            }
             if (PublicCheckBox.isSelected())
            {
                i.setEstpublic(true);
            }
            else
            {
                i.setEstpublic(false);
            }
            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");
            i.setDateitineraire(df.parse(DateDepartTf.getText()));
            i.setDatepublication(new Date(new java.util.Date().getTime()));
            i.setDistanceitineraire(0);
            i.setPrix(Double.parseDouble(PrixTf.getText()));
            i.setDescription(DescriptionTf.getText());
            Conducteurs c = new Conducteurs();
            c=(Conducteurs)Session.getInstance().getUser().getCompte();
            c.setIdConducteurs(c.getIdConducteurs());
            i.setIdConducteur(c);
            try {
                try {
                    if (ItineraireDAO.getInstance().create(i))
                    {
                        VilleItineraire ville = new VilleItineraire();
                        VilleItineraire vv = new VilleItineraire();
                        i = new Itineraire();
                        i = ItineraireDAO.getInstance().getItineraireByMaxId();
                        vv.setIdItineraires(i);
                        //recupération de la localite 
                        gouvernorats g = gouvernoratsDAO.getInstance().GetGouverneratByNom(GouverneratBox.getSelectedItem().toString());
                        delegations d = delegationsDAO.getInstance().GetDelegationByIdGouvernerat(g.getIdGouvernorats());
                        localites l = localitesDAO.getInstance().GetLocalitesByIdDelegation(d.getIdDelegations());
                        vv.setIdLocalites(l);
                        //fin récuperation de la localité
                        
                        vv.setLattitude(0);
                        vv.setLongitude(0);
                        vv.setNumVille(1);
                        VilleItineraireDAO.getInstance().create(vv);
                        ville = VilleItineraireDAO.getInstance().FindVilleArriver(i.getIditineraire());
                        vv.setIdItineraires(i);
                        //recupération de la localite 
                         g = gouvernoratsDAO.getInstance().GetGouverneratByNom(GouverneratBox1.getSelectedItem().toString());
                         d = delegationsDAO.getInstance().GetDelegationByIdGouvernerat(g.getIdGouvernorats());
                         l = localitesDAO.getInstance().GetLocalitesByIdDelegation(d.getIdDelegations());
                         vv.setIdLocalites(l);
                        //fin récuperation de la localité
                        vv.setLattitude(0);
                        vv.setLongitude(0);
                        vv.setNumVille(2);
                        if (VilleItineraireDAO.getInstance().create(vv))
                        {
                         JOptionPane.showMessageDialog(null, "l'ajout à été effectuer avec succé ");
                         PanelInfo.setVisible(false);
                          datagrid.setModel(new utils.components.jtable.tableModelNewItineraire());
                        }
                        
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (ProblemeTechniqueException ex) {
                Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ParseException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
        EnregisterBtn.setVisible(false);
    }//GEN-LAST:event_EnregisterBtnMouseClicked

    private void ModifierBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ModifierBtnMouseClicked
        EnableAll();
        RemplacerBtn.setVisible(true);
    }//GEN-LAST:event_ModifierBtnMouseClicked

    private void RemplacerBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemplacerBtnMouseClicked
         Itineraire i = new Itineraire();
          i=itineraire;
        try {
                i.setDescription(DescriptionTf.getText());
            if (ConfirmerCheckBox.isSelected())
            {
                i.setEstconfirmer(true);
            }
            else
            {
                i.setEstconfirmer(false);
            }
             if (PublicCheckBox.isSelected())
            {
                i.setEstpublic(true);
            }
            else
            {
                i.setEstpublic(false);
            }
            java.text.SimpleDateFormat df = new java.text.SimpleDateFormat("yyyy-MM-dd");
            i.setDateitineraire(df.parse(DateDepartTf.getText()));
            i.setDatepublication(new Date(new java.util.Date().getTime()));
            i.setDistanceitineraire(0);
            i.setPrix(Double.parseDouble(PrixTf.getText()));
            
            i.setDescription(DescriptionTf.getText());
            Conducteurs c = new Conducteurs();
            c=(Conducteurs)Session.getInstance().getUser().getCompte();
            c.setIdConducteurs(c.getIdConducteurs());
            i.setIdConducteur(c);
            if(ItineraireDAO.getInstance().update(i))
            {
                JOptionPane.showMessageDialog(null, "La Modification a étè effectué avec succés.");
            }
            else
            {
              JOptionPane.showMessageDialog(null, "La Modification n'a pas étè effectué. ");
                
            }
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
        ConfirmerCheckBox.setEnabled(false);
        ConfirmerBtn.setVisible(false);
        RemplacerBtn.setVisible(false);
        if (ConfirmerCheckBox.isSelected())
        {
            ModifierBtn.setVisible(false);
            SupprimerBtn.setVisible(false);
        }
        datagrid.setModel(new utils.components.jtable.tableModelNewItineraire());
        ModifierBtn.setVisible(false);
        SupprimerBtn.setVisible(false);
        DisableAll();
        ViderAll();
        ViderComboBox();
        ConfirmerCheckBox.setSelected(false);
        PublicCheckBox.setSelected(false);
        
    }//GEN-LAST:event_RemplacerBtnMouseClicked

    private void testcbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_testcbItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_testcbItemStateChanged

    private void AccueilBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AccueilBtnMouseClicked
         (new GUI.Conductuer.Accueil()).setVisible(true);
         this.dispose();
    }//GEN-LAST:event_AccueilBtnMouseClicked

    private void ConfirmerBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ConfirmerBtnMouseClicked
         //itineraire.setEstconfirmer(true);
          Itineraire ii = new Itineraire();
          ii=itineraire;
          ii.setEstconfirmer(true);
        try {
            if(ItineraireDAO.getInstance().update(ii))
            {
                JOptionPane.showMessageDialog(null, "La confirmation a étè effectué avec succés.");
            }
            else
            {
              JOptionPane.showMessageDialog(null, "La confirmation n'a pas étè effectué. ");
                
            }
        } catch (ProblemeTechniqueException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(NewItineraireConducteur.class.getName()).log(Level.SEVERE, null, ex);
        }
        ConfirmerCheckBox.setEnabled(false);
        ConfirmerBtn.setVisible(false);
    }//GEN-LAST:event_ConfirmerBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewItineraireConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewItineraireConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewItineraireConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewItineraireConducteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewItineraireConducteur().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccueilBtn;
    private javax.swing.JButton AjouterBtn;
    private javax.swing.JButton ConfirmerBtn;
    private javax.swing.JCheckBox ConfirmerCheckBox;
    private javax.swing.JLabel DateDLabel;
    private javax.swing.JTextField DateDepartTf;
    private javax.swing.JLabel DescriptionLabel;
    private javax.swing.JTextArea DescriptionTf;
    private javax.swing.JButton EnregisterBtn;
    private javax.swing.JComboBox GouverneratBox;
    private javax.swing.JComboBox GouverneratBox1;
    private javax.swing.JButton ListePassagerBtn;
    private javax.swing.JComboBox LocalitesBox;
    private javax.swing.JComboBox LocalitesBox1;
    private javax.swing.JButton MapBtn;
    private javax.swing.JButton ModifierBtn;
    private javax.swing.JTextField NbrAttenteTf;
    private javax.swing.JLabel NbrPAttenteLabel;
    private javax.swing.JLabel NbrPConfirmerLabel;
    private javax.swing.JTextField NbrPassagerConfirmerTf;
    private javax.swing.JPanel PanelInfo;
    private javax.swing.JLabel PrixLabel;
    private javax.swing.JTextField PrixTf;
    private javax.swing.JCheckBox PublicCheckBox;
    private javax.swing.JButton RemplacerBtn;
    private javax.swing.JLabel SetTextnbrPlace;
    private javax.swing.JButton SupprimerBtn;
    private javax.swing.JLabel VilleALabel;
    private javax.swing.JLabel VilleDLabel;
    private javax.swing.JTable datagrid;
    private javax.swing.JComboBox delegationBox;
    private javax.swing.JComboBox delegationBox1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox testcb;
    // End of variables declaration//GEN-END:variables
}
